version: 2.1

commands:
  setup-rust-toolchain:
    parameters:
      rust-version:
        type: string
        default: "stable"
    steps:
      - run:
          name: Setup Rust toolchain
          command: |
            rustup install <<parameters.rust-version>>
            rustup default <<parameters.rust-version>>
            rustc --version
  test-setup:
    parameters:
      rust-version:
        type: string
        default: "stable"
    steps:
      - checkout
      - setup-rust-toolchain:
          rust-version: <<parameters.rust-version>>
  rust-tests:
    parameters:
      rust-version:
        type: string
        default: "stable"
    steps:
      - test-setup:
          rust-version: <<parameters.rust-version>>
      # Test with 1. only default features on, 2. all features on, 3. no features on.
      # This is not perfect (really we want the cartesian product), but is good enough in practice.
      - run:
          name: Test
          command: cargo test --all --verbose
      - run:
          name: Test (all features)
          command: cargo test --all --all-features --verbose
      - run:
          name: Test (no default features)
          command: cargo test --all --no-default-features --verbose

  install-rustup:
    steps:
      - run:
          name: Installing rustup
          command: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - run:
          name: Setup custom environment variables
          command: |
              echo "export PATH=$HOME/.cargo/bin:$PATH" >> $BASH_ENV
      - run:
          command: |
            rustup target add aarch64-linux-android
            rustup target add armv7-linux-androideabi
            rustup target add i686-linux-android
            rustup target add x86_64-linux-android

  android-setup:
    steps:
      - install-rustup
      - test-setup:
          rust-version: stable
      - run:
          name: Install missing Android SDK
          command: |
              sdkmanager 'build-tools;21.0.0'

jobs:
  Check Rust formatting:
    docker:
      - image: circleci/rust:latest
    steps:
      - checkout
      - run: rustup component add rustfmt
      - run: rustfmt --version
      - run: cargo fmt -- --check
  Lint Rust with clippy:
    docker:
      - image: circleci/rust:latest
    steps:
      - checkout
      - run: rustup component add clippy
      - run: cargo clippy --version
      - run: cargo clippy --all --all-targets --all-features -- -D warnings
  Rust tests - stable:
    docker:
      - image: circleci/rust:latest
    # We have to use a machine with more RAM for tests so we don't run out of memory.
    steps:
      - rust-tests
  Rust tests - beta:
    docker:
      - image: circleci/rust:latest
    steps:
      - rust-tests:
          rust-version: "beta"
  C tests:
    docker:
      - image: circleci/rust:latest
    steps:
      - test-setup:
          rust-version: stable
      - run: cargo build --release
      # Just a basic smoke test for now to make sure it compiles and runs
      # without returning an error
      - run: |
          cd glean-core/ffi/examples
          make
          ./glean_app

  Lint Android with ktlint and detekt:
    docker:
      - image: circleci/android:api-28-ndk
    steps:
      - checkout
      - run: ./gradlew ktlint
      - run: ./gradlew detekt 
        
  Android tests:
    docker:
      - image: circleci/android:api-28-ndk
    steps:
      - android-setup
      - run:
          name: Android tests
          command: ./gradlew test

  # via https://circleci.com/blog/deploying-documentation-to-github-pages-with-continuous-integration/
  Generate Rust documentation:
    docker:
      - image: circleci/rust:latest
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - run:
          name: Install mdbook
          command: |
              wget https://github.com/rust-lang-nursery/mdBook/releases/download/v0.2.1/mdbook-v0.2.1-x86_64-unknown-linux-gnu.tar.gz
              tar -xvf mdbook-v0.2.1-x86_64-unknown-linux-gnu.tar.gz
              mv mdbook /usr/local/cargo/bin/mdbook
      - run:
          name: Build Rust documentation
          command: bin/build-docs.sh
      - persist_to_workspace:
          root: build/
          paths: docs

  Generate Kotlin documentation:
    docker:
      - image: circleci/android:api-28-ndk
    steps:
      - android-setup
      - run:
          name: Build Kotlin documentation
          command: ./gradlew docs
      - persist_to_workspace:
          root: build/
          paths: docs/javadoc

  docs-deploy:
    docker:
      - image: node:8.10.0
    steps:
      - checkout
      - attach_workspace:
          at: build/
      - run:
          name: Disable jekyll builds
          command: touch build/docs/.nojekyll
      # Needed for write access to the GitHub repository;
      # see https://circleci.com/docs/2.0/gh-bb-integration/#deployment-keys-and-user-keys
      - add_ssh_keys:
          fingerprints:
            - "84:e6:13:7e:94:8d:e2:bf:4f:93:1f:d9:52:80:bb:2c"
      # The gh-pages npm package can be used to push a directory to a git branch;
      # see https://www.npmjs.com/package/gh-pages
      - run:
          name: Deploy docs to gh-pages branch
          command: |
            git config user.email "jrediger@mozilla.com"
            git config user.name "CircleCI docs-deploy job"
            npm install -g --silent gh-pages@2.0.1
            gh-pages --dotfiles --message "[skip ci] Updates" --dist build/docs

workflows:
  version: 2
  check-formating:
    jobs:
      - Check Rust formatting
  lint:
    jobs:
      - Lint Rust with clippy
      - Lint Android with ktlint and detekt
  run-tests:
    jobs:
      - Rust tests - stable
      - Rust tests - beta
      - Android tests
      - C tests
  documentation:
    jobs:
      - Generate Rust documentation
      - Generate Kotlin documentation
      - docs-deploy:
          requires:
            - Generate Rust documentation
            - Generate Kotlin documentation
          filters:
            branches:
              only: master
