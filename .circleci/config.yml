# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

---

version: 2.1

###########################################################################
# DEFINITIONS

definitions:
  - release_filters: &release-filters
      branches:
        ignore: /.*/
      tags:
        only: /^v.*/

##########################################################################
# COMMANDS

commands:
  skip-if-doc-only:
    steps:
      - run:
          name: Check doc only skip condition
          command: |
            if git log -1 "$CIRCLE_SHA1" | grep -q '\[doc only\]'; then
                echo "Skipping this step. Last commit was tagged to not require tests."
                circleci-agent step halt
            fi

  setup-rust-toolchain:
    parameters:
      rust-version:
        type: string
        default: "stable"
    steps:
      - run:
          name: Setup Rust toolchain
          command: |
            rustup install <<parameters.rust-version>>
            rustup default <<parameters.rust-version>>
            rustc --version

  test-rust:
    parameters:
      rust-version:
        type: string
        default: "stable"
    steps:
      - checkout
      - skip-if-doc-only
      - setup-rust-toolchain:
          rust-version: <<parameters.rust-version>>
      - run:
          name: Test
          command: cargo test --all --verbose

  install-rustup:
    steps:
      - run:
          name: Installing rustup
          command: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - run:
          name: Setup custom environment variables
          command: |
              echo "export PATH=$HOME/.cargo/bin:$PATH" >> $BASH_ENV

  install-android-targets:
    steps:
      - run:
          command: |
            rustup target add aarch64-linux-android
            rustup target add armv7-linux-androideabi
            rustup target add i686-linux-android
            rustup target add x86_64-linux-android

  android-setup:
    steps:
      - checkout
      - install-rustup
      - setup-rust-toolchain:
          rust-version: stable
      - install-android-targets
      - run:
          name: Install missing Android SDK
          command: |
              sdkmanager 'build-tools;21.0.0'
      # The Debian container in use is shipping libtinfo.so.6, but the Clang deployed in the NDK requires v5.
      # We hack around that by symlinking the new to the old version, they seem to be mostly compatible.
      - run:
          name: "HACK: Fix up missing libtinfo.so.5"
          command: |
              sudo ln -s /lib/x86_64-linux-gnu/libtinfo.so.6 /lib/x86_64-linux-gnu/libtinfo.so.5

  test-python:
    steps:
      - install-rustup
      - setup-rust-toolchain
      - run:
          name: Python tests
          command: make test-python

  install-mingw:
    steps:
      - run:
          name: Install mingw
          command: |
            sudo apt update
            sudo apt install -y gcc-mingw-w64
      - run:
          name: Add mingw target
          command: |
            rustup target add x86_64-pc-windows-gnu
            # Set the linker to use for Rust/mingw
            echo '[target.x86_64-pc-windows-gnu]' >> ~/.cargo/config
            echo 'linker = "/usr/bin/x86_64-w64-mingw32-gcc"' >> ~/.cargo/config
      - run:
          name: Fix broken mingw toolchain
          command: |
            # Fix broken libraries
            # https://github.com/rust-lang/rust/issues/47048
            # https://github.com/rust-lang/rust/issues/49078
            # https://wiki.archlinux.org/index.php/Rust#Windows
            for lib in crt2.o dllcrt2.o libmsvcrt.a; do cp -v /usr/x86_64-w64-mingw32/lib/$lib ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-pc-windows-gnu/lib/; done

  install-ghr-darwin:
    steps:
      - run:
          name: Get ghr release tool
          command: |
            GHR=ghr_v0.13.0_darwin_amd64
            GHR_SHA256=319988a001462f80b37cf40fbc41b9de60b0a1cffa2a338b47b9fe5eef25f60e
            curl -sfSL --retry 5 --retry-delay 10 -O "https://github.com/tcnksm/ghr/releases/download/v0.13.0/${GHR}.zip"
            echo "${GHR_SHA256} *${GHR}.zip" | shasum -a 256 -c -
            unzip "${GHR}.zip"
            cp ./${GHR}/ghr ghr

  install-ghr-linux:
    steps:
      - run:
          name: Get ghr release tool
          command: |
            GHR=ghr_v0.13.0_linux_amd64
            GHR_SHA256=c428627270ae26e206cb526cb8c7bdfba475dd278f6691ddaf863355adadfa13
            curl -sfSL --retry 5 --retry-delay 10 -O "https://github.com/tcnksm/ghr/releases/download/v0.13.0/${GHR}.tar.gz"
            echo "${GHR_SHA256} *${GHR}.tar.gz" | sha256sum -c -
            tar -xf "${GHR}.tar.gz"
            cp ./${GHR}/ghr ghr

jobs:
  ###########################################################################
  # Project-level

  License check:
    docker:
      - image: circleci/rust:latest
    steps:
      - checkout
      - run:
          name: Install cargo-deny
          command: |
            DENY_VERSION=0.4.2
            DENY="cargo-deny-${DENY_VERSION}-x86_64-unknown-linux-musl"
            DENY_SHA256=400edab6e6f66927c8f929dcab3e48a7f3017ceaeba7aee12c992ad33b84bdce
            curl -sfSL --retry 5 --retry-delay 10 -O "https://github.com/EmbarkStudios/cargo-deny/releases/download/${DENY_VERSION}/${DENY}.tar.gz"
            echo "${DENY_SHA256} *${DENY}.tar.gz" | shasum -a 256 -c -
            tar -xvf "${DENY}.tar.gz"
            mv "${DENY}/cargo-deny" /usr/local/cargo/bin/cargo-deny
            chmod +x /usr/local/cargo/bin/cargo-deny
      - run:
          name: Run license check
          command: cargo deny check

  Lint YAML with yamllint:
    docker:
      - image: circleci/python:3.7.5
    steps:
      - checkout
      - run: sudo pip install yamllint
      - run: make yamllint

  ###########################################################################
  # Rust / C / FFI

  Check Rust formatting:
    docker:
      - image: circleci/rust:latest
    steps:
      - checkout
      - run: rustup component add rustfmt
      - run: rustfmt --version
      - run: cargo fmt -- --check

  Lint Rust with clippy:
    docker:
      - image: circleci/rust:latest
    steps:
      - checkout
      - run: rustup component add clippy
      - run: cargo clippy --version
      - run: cargo clippy --all --all-targets --all-features -- -D warnings

  Rust tests - stable:
    docker:
      - image: circleci/rust:latest
    resource_class: "medium+"
    steps:
      - test-rust

  Rust tests - beta:
    docker:
      - image: circleci/rust:latest
    steps:
      - test-rust:
          rust-version: "beta"

  Rust tests - minimum version:
    docker:
      - image: circleci/rust:latest
    resource_class: "medium+"
    steps:
      - test-rust:
          rust-version: "1.36.0"

  Rust FFI header check:
    docker:
      - image: circleci/rust:latest
    steps:
      - checkout
      - skip-if-doc-only
      - setup-rust-toolchain:
          rust-version: "nightly"
      - run:
          name: FFI header consistency check
          command: |
            wget https://github.com/eqrion/cbindgen/releases/download/v0.10.0/cbindgen
            mv cbindgen /usr/local/cargo/bin/cbindgen
            chmod +x /usr/local/cargo/bin/cbindgen
            make cbindgen
            if ! git diff --exit-code HEAD -- glean-core/ios/Glean/GleanFfi.h; then
              echo "=================================================="
              echo "GleanFfi.h is different from what's stored in git."
              echo "Please regenerate the file using:"
              echo "    make cbindgen"
              echo "Commit the modified file and push."
              echo "=================================================="
              exit 1
            fi

  C tests:
    docker:
      - image: circleci/rust:latest
    steps:
      - checkout
      - skip-if-doc-only
      - setup-rust-toolchain:
          rust-version: stable
      - run: cargo build --release
      # Just a basic smoke test for now to make sure it compiles and runs
      # without returning an error
      - run: |
          cd glean-core/ffi/examples
          make
          ./glean_app

  Generate Rust documentation:
    docker:
      - image: circleci/rust:latest
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - run:
          name: Install mdbook
          command: |
              MDBOOK_VERSION=v0.3.5
              MDBOOK="mdbook-${MDBOOK_VERSION}-x86_64-unknown-linux-gnu.tar.gz"
              MDBOOK_SHA256=e03cc253650fa0b4780fab4d75df64c48d35d48f452fcf61c5ec0ae652f9bd8e
              curl -sfSL --retry 5 --retry-delay 10 -O "https://github.com/rust-lang-nursery/mdBook/releases/download/${MDBOOK_VERSION}/${MDBOOK}"
              echo "${MDBOOK_SHA256} *${MDBOOK}" | shasum -a 256 -c -
              tar -xvf "${MDBOOK}"
              mv mdbook /usr/local/cargo/bin/mdbook
      - run:
          name: Install mdbook-open-on-gh
          command: |
              OPENON_VERSION=1.0.1
              OPENON="mdbook-open-on-gh-${OPENON_VERSION}-x86_64-unknown-linux-gnu.tar.gz"
              OPENON_SHA256=ca5901ef58844f5a6e6b84aa31d99fc0bab1dd7f7d6913e1d8399a6a2dc80955
              curl -sfSL --retry 5 --retry-delay 10 -O "https://github.com/badboy/mdbook-open-on-gh/releases/download/${OPENON_VERSION}/${OPENON}"
              echo "${OPENON_SHA256} *${OPENON}" | shasum -a 256 -c -
              tar -xvf "${OPENON}"
              mv mdbook-open-on-gh /usr/local/cargo/bin/mdbook-open-on-gh
      - run:
          name: Build Rust documentation
          command: bin/build-rust-docs.sh
      - persist_to_workspace:
          root: build/
          paths:
            - docs/book
            - docs/docs
            - docs/index.html

  ###########################################################################
  # Android / Kotlin / Java

  Lint Android with ktlint and detekt:
    docker:
      - image: circleci/android:api-28-ndk
    steps:
      - checkout
      - run: ./gradlew --no-daemon lint
      - run: ./gradlew --no-daemon ktlint
      - run: ./gradlew --no-daemon detekt

  Android tests:
    docker:
      - image: circleci/android:api-28-ndk
    steps:
      - android-setup
      - skip-if-doc-only
      - run:
          name: Restrict to Linux builds only
          command: |
              echo "rust.targets=linux-x86-64" > local.properties
      - run:
          name: Android tests
          command: ./gradlew --no-daemon :glean:testDebugUnitTest
          environment:
            GRADLE_OPTS: -Xmx2048m
            TARGET_CFLAGS: -DNDEBUG
      - run:
          name: Save test results
          command: |
              mkdir -p ~/test-results/junit/
              mkdir -p ~/test-results/tests/
              cp -a glean-core/android/build/reports/tests ~/test-results/
              find glean-core/android/build -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_artifacts:
          path: ~/test-results/tests
          destination: test-results
      - store_test_results:
          path: ~/test-results

  android-packaging:
    docker:
      - image: circleci/android:api-28-ndk
    steps:
      - android-setup
      - install-mingw
      - run:
          name: Install llvm
          command: |
            sudo apt install -y llvm-7
            # We need this tool under its common name
            sudo ln -s /usr/lib/llvm-7/bin/dsymutil /usr/bin/dsymutil
      - run:
          name: Add darwin target
          command: |
            rustup target add x86_64-apple-darwin
      - attach_workspace:
          at: macos
      - run:
          name: Put macOS build in place
          command: |
            mkdir -p target/x86_64-apple-darwin/release
            cp -a macos/target/release/libglean_ffi.dylib target/x86_64-apple-darwin/release
      - run:
          name: Package a release artifact
          command: |
            export ORG_GRADLE_PROJECT_RUST_ANDROID_GRADLE_TARGET_X86_64_PC_WINDOWS_GNU_RUSTFLAGS="-C linker=x86_64-w64-mingw32-gcc"
            export ORG_GRADLE_PROJECT_RUST_ANDROID_GRADLE_TARGET_X86_64_PC_WINDOWS_GNU_AR=x86_64-w64-mingw32-ar
            export ORG_GRADLE_PROJECT_RUST_ANDROID_GRADLE_TARGET_X86_64_PC_WINDOWS_GNU_CC=x86_64-w64-mingw32-gcc
            # A hack to force-skip macOS builds.
            # We re-use the dylib generated in the "macOS release build" step.
            export ORG_GRADLE_PROJECT_RUST_ANDROID_GRADLE_TARGET_X86_64_APPLE_DARWIN_AR=true
            export ORG_GRADLE_PROJECT_RUST_ANDROID_GRADLE_TARGET_X86_64_APPLE_DARWIN_CC=true
            export RUSTC=$(pwd)/bin/rust-wrapper-hack.sh

            echo "rust.targets=arm,arm64,x86_64,x86,linux-x86-64,win32-x86-64-gnu,darwin" > local.properties

            ./gradlew --no-daemon assembleRelease
            ./gradlew --no-daemon publish
            ./gradlew --no-daemon checkMavenArtifacts
          environment:
            GRADLE_OPTS: -Xmx2048m
            TARGET_CFLAGS: -DNDEBUG
      - store_artifacts:
          path: build/maven
          destination: build
      - persist_to_workspace:
          root: .
          paths: build

  android-release:
    docker:
      - image: circleci/rust:latest
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install-ghr-linux
      - run:
          name: Publish a release on GitHub
          command: |
            VERSION="${CIRCLE_TAG}"
            RAWVERSION="${VERSION#v}"
            VERSIONFILE=.buildconfig.yml
            if ! grep -q "libraryVersion: ${RAWVERSION}" "${VERSIONFILE}"; then
               echo "=================================================="
               echo "${VERSIONFILE} does not contain the expected tagged version ${RAWVERSION}"
               echo "Instead it has:"
               grep "libraryVersion:" "${VERSIONFILE}"
               echo "Ensure the tag corresponds to the version in ${VERSIONFILE}"
               echo "=================================================="
               exit 1
            fi

            PKGDIR=./build/package
            # Collect all files into a single directory
            mkdir -p ${PKGDIR}
            # The glean-gradle-plugin also creates releases with an "unspecified" version
            # when used internally. We don't need to ship those.
            find ./build/maven/org/mozilla/telemetry/ \( \( -name "*.aar*" -or -name "*.jar*" -or -name "*.pom*" \) -and -not -name "*unspecified*" \) \
              -exec cp {} ${PKGDIR} \;

            # Bundle all release files up into a single zip file
            ZIPFILE=glean-${VERSION}.zip
            zip --junk-paths ${ZIPFILE} ${PKGDIR}/*
            mv ${ZIPFILE} ${PKGDIR}

            # Upload to GitHub
            ./ghr -replace ${VERSION} ${PKGDIR}

  Generate Kotlin documentation:
    docker:
      - image: circleci/android:api-28-ndk
    steps:
      - android-setup
      - run:
          name: Build Kotlin documentation
          command: ./gradlew --no-daemon docs
      - persist_to_workspace:
          root: build/
          paths: docs/javadoc

  ###########################################################################
  # Swift / iOS / macOS

  Check Swift formatting:
    macos:
      xcode: "11.3.0"
    steps:
      - checkout
      - run:
          name: Install lint tools
          command: |
            # do not update brew (might takes ages)
            export HOMEBREW_NO_AUTO_UPDATE=1
            brew install swiftlint swiftformat
      - run:
          name: Run swiftlint
          command: swiftlint --strict
      - run:
          name: Run swiftformat
          command: |
            swiftformat glean-core/ios samples/ios --swiftversion 5 --verbose
            git diff --exit-code HEAD -- glean-core/ios samples/ios

  iOS build and test:
    macos:
      xcode: "11.3.0"
    steps:
      - checkout
      - run:
          name: Set Ruby Version
          command: echo 'chruby ruby-2.6.5' >> ~/.bash_profile
      - run:
          name: Show Ruby environment
          command: |
            ruby --version
            gem env
      - install-rustup
      - setup-rust-toolchain
      - restore_cache:
          name: Restore rubygems cache
          key: swift-docs-gems-v6
      - run:
          name: Install jazzy and xcpretty
          command: gem install jazzy xcpretty
      - save_cache:
          name: Save rubygems cache
          # NEEDS TO CHANGE WHEN JAZZY IS UPDATED
          key: swift-docs-gems-v6
          paths:
            - ~/.gem/ruby/2.6.5
      - run:
          name: Setup build environment
          command: |
            rustup target add aarch64-apple-ios x86_64-apple-ios
            bin/bootstrap.sh
            # See https://circleci.com/docs/2.0/testing-ios/#pre-starting-the-simulator
            xcrun instruments -w "iPhone 11 (13.3) [" || true
            # Store build type for use in cache key
            if [ -z "${CIRCLE_TAG}" ]; then
              echo "release" > buildtype.txt
            else
              echo "debug" > buildtype.txt
            fi
      - restore_cache:
          keys:
            - v1-cargo-cache-{{arch}}-{{checksum "buildtype.txt"}}-{{checksum "Cargo.lock"}}
      - run:
          name: Run iOS build
          command: bash bin/run-ios-build.sh
      - save_cache:
          paths:
            - /Users/distiller/.cargo/registry
            - target
          key: v1-cargo-cache-{{arch}}-{{checksum "buildtype.txt"}}-{{checksum "Cargo.lock"}}
      - run:
          name: Run iOS tests
          command: |
            if git log -1 "$CIRCLE_SHA1" | grep -q '\[doc only\]'; then
                echo "Skipping this step. Last commit was tagged to not require tests."
            else
                bash bin/run-ios-tests.sh
            fi
      - run:
          name: Generate Swift documentation
          command: bash bin/build-swift-docs.sh
      - store_artifacts:
          path: raw_xcodebuild.log
          destination: raw_xcodebuild.log
      - store_artifacts:
          path: raw_xcodetest.log
          destination: raw_xcodetest.log
      - persist_to_workspace:
          root: build/
          paths: docs/swift
      - skip-if-doc-only
      - run:
          name: Build Carthage archive
          no_output_timeout: 20m
          command: |
            if [ -z "${CIRCLE_TAG}" ]; then
              # XCode tests build in Debug configuration, save us a full
              # Rust rebuild in Release mode by forcing Debug mode on
              # non-release builds.
              bash bin/build-carthage.sh Glean Debug
            else
              bash bin/build-carthage.sh Glean
            fi
      - run:
          name: "Create Carthage bin-only project specification"
          command: |
            ZIP_URL=https://circleci.com/api/v1.1/project/github/mozilla/glean/$CIRCLE_BUILD_NUM/artifacts/0/dist/Glean.framework.zip
            echo "{\"0.0.1\":\"$ZIP_URL\"}" > mozilla.glean.json
            # Store the build number for retrieval in a later step.
            echo "$CIRCLE_BUILD_NUM" > ios-build-num.txt
      - store_artifacts:
          path: Glean.framework.zip
          destination: dist/Glean.framework.zip
      - store_artifacts:
          path: mozilla.glean.json
          destination: dist/mozilla.glean.json
      - persist_to_workspace:
          root: .
          paths:
            - ios-build-num.txt
      - run:
          name: "Carthage binary snapshot URL"
          command: |
            JSON_URL=https://circleci.com/api/v1.1/project/github/mozilla/glean/$CIRCLE_BUILD_NUM/artifacts/0/dist/mozilla.glean.json
            echo "Add the following line to your Cartfile:"
            echo "binary \"$JSON_URL\" ~> 0.0.1-snapshot # mozilla/glean@$CIRCLE_SHA1"
      - persist_to_workspace:
          root: .
          paths:
            - Glean.framework.zip

  iOS integration test:
    macos:
      xcode: "11.3.0"
    steps:
      - checkout
      - skip-if-doc-only
      - install-rustup
      - setup-rust-toolchain
      - run:
          name: Setup build environment
          command: |
            rustup target add aarch64-apple-ios x86_64-apple-ios
            # See https://circleci.com/docs/2.0/testing-ios/#pre-starting-the-simulator
            xcrun instruments -w "iPhone 11 (13.3) [" || true
      - attach_workspace:
          at: .
      - run:
          name: Use binary build of Glean
          command: |
            # Retrieve the previous build number
            IOS_BUILD_NUM=$(< ios-build-num.txt)
            GLEAN_PATH="$(pwd)"
            CARTFILE_PATH="${GLEAN_PATH}/samples/ios/app/Cartfile"
            # The previous step generated a binary file and the corresponding JSON manifest
            JSON_URL="https://circleci.com/api/v1.1/project/github/mozilla/glean/${IOS_BUILD_NUM}/artifacts/0/dist/mozilla.glean.json"

            echo "Current Cartfile:"
            cat "${CARTFILE_PATH}"
            echo "================="
            echo "New Cartfile:"
            sed -i.bak "/mozilla\/glean/s#.*#binary \"$JSON_URL\" ~> 0.0.1-SNAPSHOT#" "$CARTFILE_PATH"
            cat "${CARTFILE_PATH}"
      - run:
          name: Build sample app
          command: |
            # Build in Debug mode to speed it all up
            pushd samples/ios/app
            carthage bootstrap --platform iOS --cache-builds --configuration Debug --verbose
            popd
            bash bin/run-ios-sample-app-build.sh
      - store_artifacts:
          path: raw_sample_xcodebuild.log
          destination: raw_sample_xcodebuild.log
      - run:
          name: Run sample app tests
          command: |
            bash bin/run-ios-sample-app-test.sh
      - store_artifacts:
          path: raw_sample_xcodetest.log
          destination: raw_sample_xcodetest.log

  Carthage release:
    macos:
      xcode: "11.3.0"
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install-ghr-darwin
      - run:
          name: Release Carthage archive on GitHub
          command: |
            ./ghr -replace "${CIRCLE_TAG}" Glean.framework.zip

  macOS release build:
    macos:
      xcode: "11.3.0"
    steps:
      - install-rustup
      - setup-rust-toolchain
      - checkout
      - run:
          name: Build for release
          command: |
              cargo build --release --all
      - persist_to_workspace:
          root: .
          paths: target/release/libglean_ffi.dylib

  ###########################################################################
  # Python

  Lint Python:
    docker:
      - image: circleci/python:3.7.5
    steps:
      - checkout
      - run:
          name: Python lints
          command: make pythonlint

  Python 3_5 tests:
    docker:
      - image: circleci/python:3.5.9
    steps:
      - checkout
      - skip-if-doc-only
      - test-python

  Python 3_6 tests:
    docker:
      - image: circleci/python:3.6.9
    steps:
      - checkout
      - skip-if-doc-only
      - test-python

  Python 3_7 tests:
    docker:
      - image: circleci/python:3.7.6
    steps:
      - checkout
      - test-python
      - persist_to_workspace:
          root: glean-core/python/
          paths: .venv

  Generate Python documentation:
    docker:
      - image: circleci/python:3.7.6
    steps:
      - checkout
      - attach_workspace:
          at: glean-core/python/
      - run:
          name: Generate Python docs
          command: glean-core/python/.venv/bin/python3 -m pdoc --html glean --force -o build/docs/python
      - persist_to_workspace:
          root: build/
          paths: docs/python

  pypi-linux-release:
    docker:
      # The official docker image for building manylinux1 wheels
      - image: quay.io/pypa/manylinux1_x86_64
    steps:
      - install-rustup
      - setup-rust-toolchain
      - checkout
      - run:
          name: Setup default Python version
          command: |
            echo "export PATH=/opt/python/cp37-cp37m/bin:$PATH" >> $BASH_ENV
      - run:
          name: Build Python extension
          command: |
            make build-python
      - run:
          name: Build Linux wheel
          command: |
            cd glean-core/python
            .venv/bin/python3 setup.py bdist_wheel
            .venv/bin/python3 -m auditwheel repair dist/*.whl
            # Requires that the TWINE_USERNAME and TWINE_PASSWORD environment
            # variables are configured in CircleCI's environment variables.
            .venv/bin/python3 -m twine upload wheelhouse/*
      - install-ghr-linux
      - run:
          name: Publish to Github
          command: |
            # Upload to GitHub
            ./ghr -replace ${CIRCLE_TAG} glean-core/python/wheelhouse

  pypi-macos-release:
    macos:
      xcode: "11.3.0"
    steps:
      - install-rustup
      - setup-rust-toolchain
      - checkout
      - run:
          name: Build and Test Python extension
          command: |
            make test-python
      - run:
          name: Build macOS wheel
          command: |
            cd glean-core/python
            .venv/bin/python3 setup.py bdist_wheel
            # Requires that the TWINE_USERNAME and TWINE_PASSWORD environment
            # variables are configured in CircleCI's environment variables.
            .venv/bin/python3 -m twine upload dist/*
      - install-ghr-darwin
      - run:
          name: Publish to Github
          command: |
            # Upload to GitHub
            ./ghr -replace ${CIRCLE_TAG} glean-core/python/dist

  pypi-windows-release:
    docker:
      - image: circleci/python:3.7.6
    steps:
      - install-rustup
      - setup-rust-toolchain
      - install-mingw
      - checkout
      - run:
          name: Install Python development tools for host
          command:
            make python-setup
      - run:
          name: Build Windows glean_ffi.dll
          command:
            cargo build --target x86_64-pc-windows-gnu
      - run:
          name: Build Windows wheel
          command: |
            cd glean-core/python
            GLEAN_PYTHON_MINGW_BUILD=1 .venv/bin/python3 setup.py bdist_wheel
            # Requires that the TWINE_USERNAME and TWINE_PASSWORD environment
            # variables are configured in CircleCI's environment variables.
            .venv/bin/python3 -m twine upload dist/*
      - install-ghr-linux
      - run:
          name: Publish to Github
          command: |
            # Upload to GitHub
            ./ghr -replace ${CIRCLE_TAG} glean-core/python/dist

  ###########################################################################
  # Docs

  docs-linkcheck:
    docker:
      - image: circleci/python
    steps:
      - checkout
      - run:
          name: Install linkchecker
          command: sudo apt install linkchecker
      - attach_workspace:
          at: build/
      - run:
          name: Check internal documentation links
          command: |
            linkchecker \
              --ignore-url javadoc \
              --ignore-url swift \
              --ignore-url python \
              --ignore-url docs/glean_core \
              --ignore-url ErrorKind \
              --ignore-url std.struct.Error \
              build/docs

  docs-spellcheck:
    docker:
      # Use Debian Sid so we get aspell 0.60.8 or later (which contains markdown support)
      - image: circleci/buildpack-deps:sid
    steps:
      - checkout
      - run:
          name: Upgrade Debian packages
          command: sudo apt update
      - run:
          name: Install aspell
          command: sudo apt install aspell aspell-en
      - run:
          name: Check documentation spelling
          command: bin/spellcheck.sh list

  # via https://circleci.com/blog/deploying-documentation-to-github-pages-with-continuous-integration/
  docs-deploy:
    docker:
      - image: node:8.10.0
    steps:
      - checkout
      - attach_workspace:
          at: build/
      - run:
          name: Disable jekyll builds
          command: touch build/docs/.nojekyll
      - run:
          name: Show contents
          command: ls -R
      # Needed for write access to the GitHub repository;
      # see https://circleci.com/docs/2.0/gh-bb-integration/#deployment-keys-and-user-keys
      - add_ssh_keys:
          fingerprints:
            - "84:e6:13:7e:94:8d:e2:bf:4f:93:1f:d9:52:80:bb:2c"
      # The gh-pages npm package can be used to push a directory to a git branch;
      # see https://www.npmjs.com/package/gh-pages
      - run:
          name: Deploy docs to gh-pages branch
          command: |
            git config user.email "jrediger@mozilla.com"
            git config user.name "CircleCI docs-deploy job"
            npm install -g --silent gh-pages@2.0.1
            gh-pages --dotfiles --message "[skip ci] Updates" --dist build/docs

###########################################################################
# Workflows

workflows:
  version: 2
  check-formating:
    jobs:
      - Check Rust formatting
      - Check Swift formatting

  lint:
    jobs:
      - Lint YAML with yamllint
      - License check
      - Lint Rust with clippy
      - Rust FFI header check
      - Lint Android with ktlint and detekt
      - Lint Python

  ci:
    jobs:
      - Rust tests - stable
      # FIXME: Disabled due to failing to often, bug 1574424
      # - Rust tests - beta
      - Rust tests - minimum version
      - C tests
      - Android tests
      # iOS jobs run only on master by default, see below for manual-approved jobs
      - iOS build and test:
          filters:
            branches:
              only: master
      - iOS integration test:
          requires:
            - iOS build and test
          filters:
            branches:
              only: master
      - Python 3_5 tests
      - Python 3_6 tests
      - Python 3_7 tests

      - Generate Rust documentation:
          requires:
            - docs-spellcheck
      - Generate Kotlin documentation
      - Generate Python documentation:
          requires:
            - Python 3_7 tests
      - docs-linkcheck:
          requires:
            - Generate Rust documentation
            - Generate Kotlin documentation
            - Generate Python documentation
      - docs-spellcheck
      - docs-deploy:
          requires:
            - docs-linkcheck
            - iOS build and test
          filters:
            branches:
              only: master

  # iOS jobs require manual approval on PRs
  iOS:
    jobs:
      - hold:
          type: approval
          filters:
            branches:
              ignore: master
      - iOS build and test:
          requires:
            - hold
          filters:
            branches:
              ignore: master
      - iOS integration test:
          requires:
            - iOS build and test
          filters:
            branches:
              ignore: master

  release:
    jobs:
      - Android tests:
          filters: *release-filters
      - android-packaging:
          requires:
            - Android tests
            - macOS release build
          filters: *release-filters
      - android-release:
          requires:
            - android-packaging
          filters: *release-filters
      - macOS release build:
          filters: *release-filters
      - Python 3_7 tests:
          filters: *release-filters
      - pypi-linux-release:
          requires:
            - Python 3_7 tests
          filters: *release-filters
      - pypi-macos-release:
          requires:
            - Python 3_7 tests
          filters: *release-filters
      - pypi-windows-release:
          requires:
            - Python 3_7 tests
          filters: *release-filters
      - iOS build and test:
          filters: *release-filters
      - Carthage release:
          requires:
            - iOS build and test
          filters: *release-filters
