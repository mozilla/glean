/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package mozilla.telemetry.glean.private

import androidx.annotation.VisibleForTesting
import mozilla.telemetry.glean.Dispatchers
import mozilla.telemetry.glean.internal.CustomDistributionMetric
import mozilla.telemetry.glean.testing.ErrorType

/**
 * This implements the developer facing API for recording custom distribution metrics.
 *
 * Custom distributions are histograms with the following parameters that are settable on a
 * per-metric basis:
 *
 *    - `rangeMin`/`rangeMax`: The minimum and maximum values
 *    - `bucketCount`: The number of histogram buckets
 *    - `histogramType`: Whether the bucketing is linear or exponential
 *
 * This metric exists primarily for backward compatibility with histograms in
 * legacy (pre-Glean) telemetry, and its use is not recommended for newly-created
 * metrics.
 *
 * Instances of this class type are automatically generated by the parsers at build time,
 * allowing developers to record values that were previously registered in the metrics.yaml file.
 */
class CustomDistributionMetricType(
    meta: CommonMetricData,
    rangeMin: Long,
    rangeMax: Long,
    bucketCount: Long,
    histogramType: HistogramType,
) : HistogramBase {
    val inner: CustomDistributionMetric by lazy {
        CustomDistributionMetric(meta, rangeMin, rangeMax, bucketCount, histogramType)
    }

    /**
     * Accumulates precisely one signed sample and appends it to the metric.
     *
     * @param sample The singular sample to be recorded by the metric.
     */
    fun accumulateSingleSample(sample: Long) {
        Dispatchers.Delayed.launch {
            inner.accumulateSingleSample(sample)
        }
    }

    /**
     * Accumulates the provided signed samples in the metric.
     *
     * @param samples The list holding the samples to be recorded by the metric.
     */
    override fun accumulateSamples(samples: List<Long>) {
        Dispatchers.Delayed.launch {
            inner.accumulateSamples(samples)
        }
    }

    /**
     * Returns the stored value for testing purposes only. This function will attempt to await the
     * last task (if any) writing to the the metric's storage engine before returning a value.
     *
     * @param pingName represents the name of the ping to retrieve the metric for.
     *                 Defaults to the first ping listed in `send_in_pings` in the metric definition.
     * @return value of the stored distribution data
     */
    @VisibleForTesting(otherwise = VisibleForTesting.NONE)
    @JvmOverloads
    fun testGetValue(pingName: String? = null) = inner.testGetValue(pingName)

    /**
     * Returns the number of errors recorded for the given metric.
     *
     * @param errorType The type of the error recorded.
     * @return the number of errors recorded for the metric.
     */
    @VisibleForTesting(otherwise = VisibleForTesting.NONE)
    fun testGetNumRecordedErrors(error: ErrorType) = inner.testGetNumRecordedErrors(error)
}
