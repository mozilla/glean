/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package mozilla.telemetry.glean.private

import androidx.annotation.VisibleForTesting
import mozilla.telemetry.glean.Dispatchers
import java.util.concurrent.LinkedBlockingQueue
import java.util.concurrent.TimeUnit
import mozilla.telemetry.glean.internal.PingType as GleanPingType

/**
 * A ping's reason codes.
 *
 * Reason codes are expressed as an enum
 * and can be converted back to their ordinal representation,
 * which also maps to their string representation.
 *
 * This is automatically implemented for generated enums.
 */
interface ReasonCode {
    fun code(): Int {
        error("can't determine reason code")
    }
}

/**
 * An enum with no values for convenient use as the default set of reason codes.
 */
@Suppress("EmptyClassBlock")
enum class NoReasonCodes(
    /**
     * @suppress
     */
    val value: Int,
) : ReasonCode {
    // deliberately empty
}

class JobTimeoutException : Exception("Job timed out")

/**
 * A job awaiting an async `testBeforeNextSubmit` callback run.
 *
 * The callback is set using `PingType.testBeforeNextSubmit` and called upoon `PingType.submit`.
 *
 * A job **MUST* be `join()`ed in order to wait for the callback and rethrow any exceptions.
 */
class TestJob {
    var lastException: Throwable? = null
    val waitQueue: LinkedBlockingQueue<Boolean> = LinkedBlockingQueue()

    /**
     * Join the task.
     *
     * Blocks for the callback to finish once or time out.
     * If it times out a `JobTimeoutException` is thrown.
     * If the callback throws any `Throwable` it is rethrown.
     *
     * @param timeout how long to wait before giving up, in units of unit
     * @param unit a `TimeUnit` determining how to interpret the `timeout` parameter
     */
    fun join(
        timeout: Long = 3,
        unit: TimeUnit = TimeUnit.SECONDS,
    ) {
        val wait = this.waitQueue.poll(timeout, unit)
        if (wait == null) {
            throw JobTimeoutException()
        }
        this.lastException?.let { throw it }
        this.lastException = null
    }
}

/**
 * This implements the developer facing API for custom pings.
 *
 * Instances of this class type are automatically generated by the parsers at build time.
 *
 * The Ping API only exposes the [send] method, which schedules a ping for sending.
 *
 * @property reasonCodes The list of acceptable reason codes for this ping.
 */
@Suppress("LongParameterList")
class PingType<ReasonCodesEnum>(
    name: String,
    includeClientId: Boolean,
    sendIfEmpty: Boolean,
    preciseTimestamps: Boolean,
    includeInfoSections: Boolean,
    enabled: Boolean,
    val schedulesPings: List<String>,
    val reasonCodes: List<String>,
    followsCollectionEnabled: Boolean,
    val uploaderCapabilities: List<String>,
) where ReasonCodesEnum : Enum<ReasonCodesEnum>, ReasonCodesEnum : ReasonCode {
    private var testCallback: ((ReasonCodesEnum?) -> Unit)? = null
    private lateinit var innerPing: GleanPingType

    init {
        Dispatchers.Delayed.launch {
            this.innerPing = GleanPingType(
                name = name,
                includeClientId = includeClientId,
                sendIfEmpty = sendIfEmpty,
                preciseTimestamps = preciseTimestamps,
                includeInfoSections = includeInfoSections,
                schedulesPings = schedulesPings,
                reasonCodes = reasonCodes,
                enabled = enabled,
                followsCollectionEnabled = followsCollectionEnabled,
                uploaderCapabilities = uploaderCapabilities,
            )
        }
    }

    /**
     * **Test-only API**
     *
     * Attach a callback to be called right before a new ping is submitted.
     * The provided function is called exactly once before submitting a ping.
     *
     * Note: The callback will be called on any call to submit.
     * A ping might not be sent afterwards, e.g. if the ping is otherwise empty (and
     * `send_if_empty` is `false`).
     *
     * @returns a `TestJob` to `join` on the callback. `TestJob.join` resolves after the callback runs.
     */
    @VisibleForTesting(otherwise = VisibleForTesting.NONE)
    @Suppress("TooGenericExceptionCaught")
    @Synchronized
    fun testBeforeNextSubmit(cb: (ReasonCodesEnum?) -> Unit): TestJob {
        val testJob = TestJob()
        this.testCallback = { reason ->
            try {
                cb(reason)
            } catch (e: Throwable) {
                testJob.lastException = e
            } finally {
                testJob.waitQueue.put(true)
            }
        }

        return testJob
    }

    /**
     * Collect and submit the ping for eventual upload.
     *
     * While the collection of metrics into pings happens synchronously, the
     * ping queuing and ping uploading happens asyncronously.
     * There are no guarantees that this will happen immediately.
     *
     * If the ping currently contains no content, it will not be queued.
     *
     * @param reason The reason the ping is being submitted.
     */
    @JvmOverloads
    fun submit(reason: ReasonCodesEnum? = null) {
        Dispatchers.Delayed.launch {
            this.testCallback?.let {
                it(reason)
            }
            this.testCallback = null

            val reasonString = reason?.let { this.reasonCodes[it.code()] }
            this.innerPing.submit(reasonString)
        }
    }

    /**
     * Enable or disable a ping.
     *
     * Disabling a ping causes all data for that ping to be removed from storage
     * and all pending pings of that type to be deleted.
     */
    fun setEnabled(enabled: Boolean) {
        Dispatchers.Delayed.launch {
            this.innerPing.setEnabled(enabled)
        }
    }
}
