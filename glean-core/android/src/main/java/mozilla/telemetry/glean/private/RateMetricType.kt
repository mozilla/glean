/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package mozilla.telemetry.glean.private

import androidx.annotation.VisibleForTesting
import mozilla.telemetry.glean.Dispatchers
import mozilla.telemetry.glean.internal.RateMetric
import mozilla.telemetry.glean.testing.ErrorType

/**
 * This implements the developer facing API for recording rate metrics.
 *
 * Instances of this class type are automatically generated by the parsers at build time,
 * allowing developers to record values that were previously registered in the metrics.yaml file.
 *
 * The rate API exposes the [addToNumerator] and [addToDenominator] method, which takes care of validating the input
 * data and making sure that limits are enforced.
 */
class RateMetricType(
    private var meta: CommonMetricData,
) {
    val inner: RateMetric by lazy { RateMetric(meta) }

    /**
     * Increases the numerator by `amount`.
     *
     * @param amount The amount to increase by. Should be non-negative.
     */
    fun addToNumerator(amount: Int) {
        Dispatchers.Delayed.launch {
            inner.addToNumerator(amount)
        }
    }

    /**
     * Increases the denominator by `amount`.
     *
     * @param amount The amount to increase by. Should be non-negative.
     */
    fun addToDenominator(amount: Int) {
        Dispatchers.Delayed.launch {
            inner.addToDenominator(amount)
        }
    }

    /**
     * Returns the stored value for testing purposes only. This function will attempt to await the
     * last task (if any) writing to the the metric's storage engine before returning a value.
     *
     * @param pingName represents the name of the ping to retrieve the metric for.
     *                 Defaults to the first ping listed in `send_in_pings` in the metric definition.
     * @return value of the stored rate
     */
    @VisibleForTesting(otherwise = VisibleForTesting.NONE)
    @JvmOverloads
    fun testGetValue(pingName: String? = null) = inner.testGetValue(pingName)

    /**
     * Returns the number of errors recorded for the given metric.
     *
     * @param errorType The type of the error recorded.
     * @return the number of errors recorded for the metric.
     */
    @VisibleForTesting(otherwise = VisibleForTesting.NONE)
    fun testGetNumRecordedErrors(errorType: ErrorType) = inner.testGetNumRecordedErrors(errorType)
}
