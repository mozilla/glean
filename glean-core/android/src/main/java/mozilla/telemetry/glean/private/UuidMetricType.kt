/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package mozilla.telemetry.glean.private

import androidx.annotation.VisibleForTesting
import mozilla.telemetry.glean.Dispatchers
import mozilla.telemetry.glean.internal.UuidMetric
import java.util.UUID

/**
 * This implements the developer facing API for recording UUID metrics.
 *
 * Instances of this class type are automatically generated by the parsers at build time,
 * allowing developers to record values that were previously registered in the metrics.yaml file.
 *
 * The UUID API exposes the [generateAndSet] and [set] methods.
 *
 * The internal constructor is only used by [LabeledMetricType] directly.
 */
class UuidMetricType(private var meta: CommonMetricData) {
    val inner: UuidMetric by lazy { UuidMetric(meta) }

    /**
     * Sets to the specified value.
     *
     * @param value A UUID type with the value to record
     */
    fun set(value: UUID) {
        Dispatchers.Delayed.launch {
            inner.set(value.toString())
        }
    }

    /**
     * Generates a new random uuid and sets the metric to it.
     *
     * @return the generated UUID
     */
    fun generateAndSet(): UUID {
        val uuid = UUID.randomUUID()
        this.set(uuid)
        return uuid
    }

    /**
     * Returns the stored value for testing purposes only. This function will attempt to await the
     * last task (if any) writing to the the metric's storage engine before returning a value.
     *
     * @param pingName represents the name of the ping to retrieve the metric for.
     *                 Defaults to the first ping listed in `send_in_pings` in the metric definition.
     * @return value of the stored UUID
     */
    @VisibleForTesting(otherwise = VisibleForTesting.NONE)
    fun testGetValue(pingName: String? = null): UUID? {
        return inner.testGetValue(pingName)?.let { UUID.fromString(it) }
    }
}
