<Project Sdk="Microsoft.NET.Sdk" DefaultTargets="Build" InitialTargets="ValidateContentFiles">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Authors>Mozilla</Authors>
    <RepositoryUrl>https://github.com/mozilla/glean</RepositoryUrl>
    <Description>The Glean SDK is a modern approach for a telemetry library by Mozilla.</Description>
    <!--
      While we're still testing, mark this as a pre-release package.
      See https://docs.microsoft.com/en-us/nuget/concepts/package-versioning#pre-release-versions
    -->
    <Version>33.4.0</Version>
    <RootNamespace>Mozilla.Glean</RootNamespace>
    <PackageId>Mozilla.Telemetry.Glean</PackageId>
    <PackageProjectUrl>https://github.com/mozilla/glean/</PackageProjectUrl>
    <PackageLicenseExpression>MPL-2.0</PackageLicenseExpression>
    <RepositoryType>git</RepositoryType>
    <PackageTags>telemetry analytics glean</PackageTags>
    <Product>Glean SDK</Product>
    <!--
      The following properties were determined by following the solution outlined here:
      https://github.com/Microsoft/msbuild/issues/539#issuecomment-289930591
    -->
    <IsWindows Condition="'$(OS)' == 'Windows_NT'">true</IsWindows>
    <IsOSX Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))' == 'true'">true</IsOSX>
    <IsLinux Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' == 'true'">true</IsLinux>
    <Platforms>AnyCPU;x86</Platforms>
  </PropertyGroup>

  <!--
    Print a message to warn user this is attempting to build a multi-platform nuGet
    package meant for uploading.
  --> 
  <Target Condition="$(IsPublicPackage) == true" Name="TestMessage" AfterTargets="Build">
    <Message Text="Building a multi-platform nuGet package." Importance="high" />
  </Target>

  <!--
    Provide a way to pack all the native libraries when creating a nuGet package
    intended for the public.
    
    This can be built using, from the glean root:

      `dotnet pack glean-core/csharp/csharp.sln -c Release -p:IsPublicPackage=true`
      
    TODO: package will be built even if any of the file listed below is missing.
    This is a bug and we should fix it by making the package step fail if any
    of the files are missing.
  -->
  <ItemGroup Condition="$(IsPublicPackage) == true">
    <!--
      TODO: once we enable building from CI, the paths below will require tweaking
      to point at the appropriate directory under target/.
    -->
    <!-- Windows libraries -->
    <Content Include="../../../target/$(Configuration.ToLowerInvariant())/glean_ffi.dll" Link="runtimes/win-64/native/glean_ffi.dll">
      <PackagePath>runtimes/win-x64/native</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="../../../target/$(Configuration.ToLowerInvariant())/glean_ffi.dll" Link="runtimes/win-86/native/glean_ffi.dll">
      <PackagePath>runtimes/win-x86/native</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <!-- Linux libraries -->
    <Content Include="../../../target/$(Configuration.ToLowerInvariant())/libglean_ffi.so" Link="runtimes/linux-64/native/libglean_ffi.so">
      <PackagePath>runtimes/linux-x64/native</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="../../../target/$(Configuration.ToLowerInvariant())/libglean_ffi.so" Link="runtimes/linux-86/native/libglean_ffi.so">
      <PackagePath>runtimes/linux-x86/native</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <!-- MacOS libraries -->
    <Content Include="../../../target/$(Configuration.ToLowerInvariant())/libglean_ffi.dylib" Link="runtimes/osx-64/native/libglean_ffi.dylib">
      <PackagePath>runtimes/osx-x64/native</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
  </ItemGroup>
 
  <!--
    For local developer builds, pick the default glean-core target
    locations.
   -->
  <ItemGroup Condition="$(IsWindows) == true AND $(IsPublicPackage) != true">
    <!--
      Note: cargo build will produce the file in target/<buildtype>/glean_ffi.dll based
      on the current architecture. For example, if we run `cargo build`-->
    <Content Include="../../../target/$(Configuration.ToLowerInvariant())/glean_ffi.dll" Link="runtimes/win-64/native/glean_ffi.dll" Condition="'$(Platform)'=='x64'">
      <PackagePath>runtimes/win-x64/native</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="../../../target/$(Configuration.ToLowerInvariant())/glean_ffi.dll" Link="runtimes/win-86/native/glean_ffi.dll" Condition="'$(Platform)'=='x86'">
      <PackagePath>runtimes/win-x86/native</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <!-- Fall back to AnyCPU and hope for the best? -->
    <Content Include="../../../target/$(Configuration.ToLowerInvariant())/glean_ffi.dll" Link="runtimes/win-64/native/glean_ffi.dll" Condition="'$(Platform)'=='AnyCPU'">
      <PackagePath>runtimes/win-x64/native</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <!-- Local developer builds on Linux. -->
  <ItemGroup Condition="$(IsLinux) == true AND $(IsPublicPackage) != true">
    <Content Include="../../../target/$(Configuration.ToLowerInvariant())/libglean_ffi.so" Link="runtimes/linux-64/native/libglean_ffi.so" Condition="'$(Platform)'=='x64'">
      <PackagePath>runtimes/linux-x64/native</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="../../../target/$(Configuration.ToLowerInvariant())/libglean_ffi.so" Link="runtimes/linux-86/native/libglean_ffi.so" Condition="'$(Platform)'=='x86'">
      <PackagePath>runtimes/linux-x86/native</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <!-- Fall back to AnyCPU and hope for the best? -->
    <Content Include="../../../target/$(Configuration.ToLowerInvariant())/libglean_ffi.so" Link="runtimes/linux-64/native/libglean_ffi.so" Condition="'$(Platform)'=='x64'">
      <PackagePath>runtimes/linux-x64/native</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <!-- Local developer builds on OSX. -->
  <ItemGroup Condition="$(IsOSX) == true AND $(IsPublicPackage) != true">
    <Content Include="../../../target/$(Configuration.ToLowerInvariant())/libglean_ffi.dylib" Link="runtimes/osx-64/native/libglean_ffi.dylib">
      <PackagePath>runtimes/osx-x64/native</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <!-- Expose internal access objects to unit tests -->
  <ItemGroup>
    <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
      <_Parameter1>GleanTests</_Parameter1>
    </AssemblyAttribute>
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="System.Text.Json" Version="4.7.2" />
    <PackageReference Include="Serilog" Version="2.9.0" />
    <PackageReference Include="Serilog.Sinks.Console" Version="3.1.1" />
  </ItemGroup>

  <!--
    We create a new target to make sure that all the required files are present
    when building a cumulative nuGet package. Thanks https://stackoverflow.com/a/1028860/261698 !
  -->
  <Target Name="ValidateContentFiles" Condition="$(IsPublicPackage) == true">
    <Error Condition="!Exists(%(Content.FullPath))" Text="Missing Glean FFI file [%(Content.FullPath)]" />
  </Target>

  <ItemGroup>
    <Content Include="build\*" PackagePath="build\" />
    <Content Include="buildMultiTargeting\*" PackagePath="buildMultiTargeting\" />

    <!--
      Mark the following packages as 'local only': they will be used when building this project
      but they will not become transitive dependencies. These dependencies are required for
      `GleanParser.cs`.
    -->
    <PackageReference Include="Microsoft.Build.Framework" Version="16.6.0">
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>

    <PackageReference Include="Microsoft.Build.Utilities.Core" Version="16.6.0" PrivateAssets="All">
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
  </ItemGroup>

  <!--
    Define the code generating task. We can't load it directly from the AssemblyFile, otherwise
    msbuild will lock the file and fail next builds. To work around this, we generate a task
    definition ourselves and load the real task code inside it.
    External consumers will not need to do that, they will simply reference the AssemblyName or
    AssemblyFile in the UsingTask directive.
    
    Note that we are using the `RoslynCodeTaskFactory` for compiling inline code fragments instead
    of `CodeTaskFactory`. That's because the former is deprecated and not available outside of the
    Windows .NET framework. See https://github.com/dotnet/msbuild/issues/2890 .
  -->
  <UsingTask TaskName="GleanParser" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <RegistryFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <OutputPath ParameterType="System.String" Required="true" />
      <Namespace ParameterType="System.String" Required="true" />
      <AllowReserved ParameterType="System.Boolean" Required="false" />
    </ParameterGroup>
    <Task>
      <Code Type="Class" Source="GleanParser.cs" Language="cs" />
    </Task>
  </UsingTask>

  <!-- Run the task to generate the Glean SDK APIs -->
  <Target Name="GleanIntegration" BeforeTargets="CoreCompile">
    <!-- Declare the locations of the Glean registry files. -->
    <ItemGroup>
      <GleanRegistryFiles Include="..\..\metrics.yaml"/>
      <GleanRegistryFiles Include="..\..\pings.yaml"/>
    </ItemGroup>

    <!-- This is what actually runs the parser. -->
    <GleanParser RegistryFiles="@(GleanRegistryFiles)" OutputPath="$(IntermediateOutputPath)Glean" AllowReserved="true" Namespace="Mozilla.Glean.GleanMetrics" />
    <!--
      And this adds the generated files to the project, so that they can be found by
      the compiler and Intellisense.
    -->
    <ItemGroup>
      <Compile Include="$(IntermediateOutputPath)Glean\**\*.cs" />
    </ItemGroup>
  </Target>
</Project>
