<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Authors>Mozilla</Authors>
    <RepositoryUrl>https://github.com/mozilla/glean</RepositoryUrl>
    <Description>The Glean SDK is a modern approach for a telemetry library by Mozilla.</Description>
    <!--
      While we're still testing, mark this as a pre-release package.
      See https://docs.microsoft.com/en-us/nuget/concepts/package-versioning#pre-release-versions
    -->
    <Version>0.0.1-alpha</Version>
    <RootNamespace>Mozilla.Glean</RootNamespace>
    <PackageId>Mozilla.Telemetry.Glean</PackageId>
    <PackageProjectUrl>https://github.com/mozilla/glean/</PackageProjectUrl>
    <PackageLicenseExpression>MPL-2.0</PackageLicenseExpression>
    <RepositoryType>git</RepositoryType>
    <PackageTags>telemetry analytics glean</PackageTags>
    <Product>Glean SDK</Product>
    <!--
      The following properties were determined by following the solution outlined here:
      https://github.com/Microsoft/msbuild/issues/539#issuecomment-289930591
    -->
    <IsWindows Condition="'$(OS)' == 'Windows_NT'">true</IsWindows>
    <IsOSX Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))' == 'true'">true</IsOSX>
    <IsLinux Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' == 'true'">true</IsLinux>
  </PropertyGroup>

  <!--
    Print a message to warn user this is attempting to build a multi-platform nuGet
    package meant for uploading.
  --> 
  <Target Condition="'$(IsPublicPackage)' == 'True'" Name="TestMessage" AfterTargets="Build">
    <Message Text="Building a multi-platform nuGet package." Importance="high" />
  </Target>

  <!--
    Provide a way to pack all the native libraries when creating a nuGet package
    intended for the public.
    
    This can be built using, from the glean root:

      `dotnet pack glean-core/csharp/Glean/csharp.sln -c Release -p:IsPublicPackage=true`
      
    TODO: package will be built even if any of the file listed below is missing.
    This is a bug and we should fix it by making the package step fail if any
    of the files are missing.
  -->
  <ItemGroup Condition="'$(IsPublicPackage)' == 'True'">
    <!-- Windows libraries -->
    <Content Include="../../../target/x86_64-pc-windows-gnu/$(Configuration.ToLowerInvariant())/glean_ffi.dll" Link="runtimes/win-64/native/glean_ffi.dll" Condition="'$(Platform)'=='x64'">
      <PackagePath>runtimes/win-x64/native</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="../../../target/i686-pc-windows-gnu/$(Configuration.ToLowerInvariant())/glean_ffi.dll" Link="runtimes/win-86/native/glean_ffi.dll" Condition="'$(Platform)'=='x86'">
      <PackagePath>runtimes/win-x86/native</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <!-- Linux libraries -->
    <Content Include="../../../target/$(Configuration.ToLowerInvariant())/libglean_ffi.so" Link="runtimes/linux-64/native/libglean_ffi.so" Condition="'$(Platform)'=='x64'">
      <PackagePath>runtimes/linux-x64/native</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="../../../target/$(Configuration.ToLowerInvariant())/libglean_ffi.so" Link="runtimes/linux-86/native/libglean_ffi.so" Condition="'$(Platform)'=='x86'">
      <PackagePath>runtimes/linux-x86/native</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <!-- MacOS libraries -->
    <Content Include="../../../target/$(Configuration.ToLowerInvariant())/libglean_ffi.dylib" Link="runtimes/osx-64/native/libglean_ffi.dylib">
      <PackagePath>runtimes/osx-x64/native</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
  </ItemGroup>
 
  <!--
    For local developer builds, pick the default glean-core target
    locations.
   -->
  <ItemGroup Condition="$(IsWindows) == true">
    <!--
      Note: cargo build will produce the file in target/<buildtype>/glean_ffi.dll based
      on the current architecture. For example, if we run `cargo build`-->
    <Content Include="../../../target/$(Configuration.ToLowerInvariant())/glean_ffi.dll" Link="runtimes/win-64/native/glean_ffi.dll" Condition="'$(Platform)'=='x64'">
      <PackagePath>runtimes/win-x64/native</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="../../../target/$(Configuration.ToLowerInvariant())/glean_ffi.dll" Link="runtimes/win-86/native/glean_ffi.dll" Condition="'$(Platform)'=='x86'">
      <PackagePath>runtimes/win-x86/native</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <!-- Fall back to AnyCPU and hope for the best? -->
    <Content Include="../../../target/$(Configuration.ToLowerInvariant())/glean_ffi.dll" Link="runtimes/win-64/native/glean_ffi.dll" Condition="'$(Platform)'=='AnyCPU'">
      <PackagePath>runtimes/win-x64/native</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <!-- Local developer builds on Linux. -->
  <ItemGroup Condition="$(IsLinux) == true">
    <Content Include="../../../target/$(Configuration.ToLowerInvariant())/libglean_ffi.so" Link="runtimes/linux-64/native/libglean_ffi.so" Condition="'$(Platform)'=='x64'">
      <PackagePath>runtimes/linux-x64/native</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="../../../target/$(Configuration.ToLowerInvariant())/libglean_ffi.so" Link="runtimes/linux-86/native/libglean_ffi.so" Condition="'$(Platform)'=='x86'">
      <PackagePath>runtimes/linux-x86/native</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <!-- Fall back to AnyCPU and hope for the best? -->
    <Content Include="../../../target/$(Configuration.ToLowerInvariant())/libglean_ffi.so" Link="runtimes/linux-64/native/libglean_ffi.so" Condition="'$(Platform)'=='x64'">
      <PackagePath>runtimes/linux-x64/native</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <!-- Local developer builds on OSX. -->
  <ItemGroup Condition="$(IsOSX) == true">
    <Content Include="../../../target/$(Configuration.ToLowerInvariant())/libglean_ffi.dylib" Link="runtimes/osx-64/native/libglean_ffi.dylib">
      <PackagePath>runtimes/osx-x64/native</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <!-- Expose internal access objects to unit tests -->
  <ItemGroup>
    <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
      <_Parameter1>GleanTests</_Parameter1>
    </AssemblyAttribute>
  </ItemGroup>
</Project>
