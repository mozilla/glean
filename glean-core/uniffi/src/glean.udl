namespace glean {
    boolean glean_initialize(InternalConfiguration cfg);
    boolean glean_finish_initialize();

    void glean_enable_logging();

    void glean_set_upload_enabled(boolean enabled);

    // Experiment reporting API
    void glean_set_experiment_active(string experiment_id, string branch, record<DOMString, string> extra);
    void glean_set_experiment_inactive(string experiment_id);
    RecordedExperiment? glean_test_get_experiment_data(string experiment_id);
};

dictionary RecordedExperiment {
    string branch;
    record<DOMString, string>? extra;
};

dictionary InternalConfiguration {
    string data_path;
    string application_id;
    string language_binding_name;
    boolean upload_enabled;
    u32? max_events;
    boolean delay_ping_lifetime_io;
    string app_build;
    boolean use_core_mps;
};

enum Lifetime {
    "Ping",
    "Application",
    "User",
};

dictionary CommonMetricData {
    string category;
    string name;

    sequence<string> send_in_pings;
    Lifetime lifetime;

    boolean disabled;
    string? dynamic_label = null;
};

interface CounterMetric {
    constructor(CommonMetricData meta);

    void add(optional i32 amount = 1);

    i32? test_get_value(optional string? ping_name = null);
};
